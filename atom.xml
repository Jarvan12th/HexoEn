<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>All About Jarvan</title>
  
  <subtitle>Jarvan</subtitle>
  <link href="https://jarvan12th.github.io/HexoEn/atom.xml" rel="self"/>
  
  <link href="https://jarvan12th.github.io/HexoEn/"/>
  <updated>2022-01-06T05:32:07.265Z</updated>
  <id>https://jarvan12th.github.io/HexoEn/</id>
  
  <author>
    <name>Jarvan Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-daily-practice-20220106</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/06/Leetcode-daily-practice-20220106/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/06/Leetcode-daily-practice-20220106/</id>
    <published>2022-01-06T05:13:51.000Z</published>
    <updated>2022-01-06T05:32:07.265Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Medium-1094-Car-Pooling"><a href="#Medium-1094-Car-Pooling" class="headerlink" title="(Medium)1094. Car Pooling"></a>(Medium)<a href="https://leetcode.com/problems/car-pooling/">1094. Car Pooling</a></h5><p>Use a <code>passengersAtLocation</code> array with size 1001 to store the counts of passengers staying in the car at each location. Inverse <code>trips</code> array, increase the number of passengers that want to get on, meanwhile decrease the number of passengers that want to depart. At each location, the counts should not greater than the car’s capacity.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">carPooling</span><span class="params">(<span class="keyword">int</span>[][] trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] passengersAtLocation = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] trip : trips)&#123;</span><br><span class="line">            passengersAtLocation[trip[<span class="number">1</span>]] += trip[<span class="number">0</span>];</span><br><span class="line">            passengersAtLocation[trip[<span class="number">2</span>]] -= trip[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : passengersAtLocation)&#123;</span><br><span class="line">            passengersOnBoard += x;</span><br><span class="line">            <span class="keyword">if</span>(passengersOnBoard &gt; capacity) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(n); Space Complexity: O(n)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Medium-1094-Car-Pooling&quot;&gt;&lt;a href=&quot;#Medium-1094-Car-Pooling&quot; class=&quot;headerlink&quot; title=&quot;(Medium)1094. Car Pooling&quot;&gt;&lt;/a&gt;(Medium)&lt;a href</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-daily-practice-20220105</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/05/Leetcode-daily-practice-20220105/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/05/Leetcode-daily-practice-20220105/</id>
    <published>2022-01-05T03:21:30.000Z</published>
    <updated>2022-01-05T03:39:22.363Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Medium-131-Palindrome-Partitioning"><a href="#Medium-131-Palindrome-Partitioning" class="headerlink" title="(Medium)131. Palindrome Partitioning"></a>(Medium)<a href="https://leetcode.com/problems/palindrome-partitioning/">131. Palindrome Partitioning</a></h5><p>Generate a 2d boolean array <code>valid[][]</code> and use <code>vaild[left][right]</code> to indicate whether <code>s.substring(left, right + 1)</code> is a palindrome or not. This can be done with <code>DP</code> in O(^2^) time. Then backtrack for the result. Remember to remove the current partition at the end of the loop.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] valid = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp; (i == n-<span class="number">1</span> || j - i &lt;= <span class="number">1</span> || valid[i+<span class="number">1</span>][j-<span class="number">1</span>])) valid[i][j] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        backTrack(s, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;String&gt;(), result, valid);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(String s, <span class="keyword">int</span> start, List&lt;String&gt; temp, List&lt;List&lt;String&gt;&gt; result, <span class="keyword">boolean</span>[][] valid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = valid.length;</span><br><span class="line">        <span class="keyword">if</span>(start == n)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valid[start][i])&#123;</span><br><span class="line">                temp.add(s.substring(start, i+<span class="number">1</span>));</span><br><span class="line">                backTrack(s, i+<span class="number">1</span>, temp, result, valid);</span><br><span class="line">                temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(n^2^ + n!); Space Complexity: O(n^2^ + n)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Medium-131-Palindrome-Partitioning&quot;&gt;&lt;a href=&quot;#Medium-131-Palindrome-Partitioning&quot; class=&quot;headerlink&quot; title=&quot;(Medium)131. Palindrome </summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-daily-practice-20220104</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/04/Leetcode-daily-practice-20220104/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/04/Leetcode-daily-practice-20220104/</id>
    <published>2022-01-04T02:48:20.000Z</published>
    <updated>2022-01-04T03:15:00.856Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Easy-1009-Complement-of-Base-10-Integer"><a href="#Easy-1009-Complement-of-Base-10-Integer" class="headerlink" title="(Easy)1009. Complement of Base 10 Integer"></a>(Easy)<a href="https://leetcode.com/problems/complement-of-base-10-integer/">1009. Complement of Base 10 Integer</a></h5><p>One method is flipping all the digitals and accumulating them. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bitwiseComplement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// if the ith lastest digital in n is 0, then the ith digital in &quot;1 &lt;&lt; i&quot; is 1.</span></span><br><span class="line">            <span class="keyword">if</span>((n&amp;<span class="number">1</span>) == <span class="number">0</span>) answer += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                </span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(log~2~n); Space Complexity: O(1)</p><p>Another method is by considering XOR. We need a mask in format ‘1111…’, the number of mask’s bit digitals equals to n’s. Then <code>mask XOR n</code> conducts the answer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bitwiseComplement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(mask &lt; n) mask = (mask &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> mask ^ n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(log~2~n); Space Complexity: O(1)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Easy-1009-Complement-of-Base-10-Integer&quot;&gt;&lt;a href=&quot;#Easy-1009-Complement-of-Base-10-Integer&quot; class=&quot;headerlink&quot; title=&quot;(Easy)1009. Co</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-daily-practice-20220103</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/03/Leetcode-daily-practice-20220103/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/03/Leetcode-daily-practice-20220103/</id>
    <published>2022-01-03T06:16:04.000Z</published>
    <updated>2022-01-03T06:47:00.232Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Hard-1851-Minimum-Interval-to-Include-Each-Query"><a href="#Hard-1851-Minimum-Interval-to-Include-Each-Query" class="headerlink" title="(Hard)1851. Minimum Interval to Include Each Query"></a>(Hard)<a href="https://leetcode.com/problems/minimum-interval-to-include-each-query/">1851. Minimum Interval to Include Each Query</a></h5><p>Sort  <code>int[][] intervals and int[] queries</code> in increasing order. Use a <code>PriorityQueue</code> to store <code>int[] pair</code> in <code>int[][] intervals</code> in order. For every query operation, add all the <code>int[] pair</code> that left is less or equals to <code>queries[j]</code>. Meanwhile, remove all the <code>int[] pair</code> that right is less than <code>queries[j]</code>. And the peek <code>pair</code> is the first <code>pair</code> that contains <code>queries[j]</code> and its interval is the smallest interval. If currently, <code>PriorityQueue</code> is Empty, then there isn’t such a smallest interval.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] minInterval(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = queries.length;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] queryPairs = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) queryPairs[i] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;queries[i], i&#125;;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] -b[<span class="number">0</span>]);</span><br><span class="line">        Arrays.sort(queryPairs, (a, b) -&gt; a[<span class="number">0</span>] -b[<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; (a[<span class="number">1</span>] - a[<span class="number">0</span>]) - (b[<span class="number">1</span>] - b[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> queryVaule = queryPairs[i][<span class="number">0</span>], queryKey = queryPairs[i][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j &lt; intervals.length &amp;&amp; intervals[j][<span class="number">0</span>] &lt;= queryVaule)&#123;</span><br><span class="line">                queue.offer(intervals[j]);</span><br><span class="line">                j ++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; queue.peek()[<span class="number">1</span>] &lt; queryVaule) queue.remove();</span><br><span class="line">            </span><br><span class="line">            result[queryKey] = queue.isEmpty() ? -<span class="number">1</span> : queue.peek()[<span class="number">1</span>] - queue.peek()[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(m<em>logm + n</em>logn); Space Complexity: O(n)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Hard-1851-Minimum-Interval-to-Include-Each-Query&quot;&gt;&lt;a href=&quot;#Hard-1851-Minimum-Interval-to-Include-Each-Query&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-daily-practice-20220102</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/02/Leetcode-daily-practice-20220102/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/02/Leetcode-daily-practice-20220102/</id>
    <published>2022-01-02T13:52:35.000Z</published>
    <updated>2022-01-03T03:03:08.590Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60"><a href="#Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60" class="headerlink" title="(Medium)1010. Pairs of Songs With Total Durations Divisible by 60"></a>(Medium)<a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/">1010. Pairs of Songs With Total Durations Divisible by 60</a></h5><p>Obviously, <code>As a vaild pair (a, b), (a + b) % 60 == a % 60 + b % 60</code>. So construct a remainder array to store the frequency of remainders in <code>[0, 59]</code>.</p><p>The counting ways for <code>remainder 30, remainder 60</code> and <code>other remainders</code> are different.</p><ul><li>For <code>Rem 30</code>, it could make pairs with every <code>Rem 30</code> stored before it. <code>Rem 60</code> is as same as this.</li><li>For other <code>Rem i</code>, it should count every <code>Rem 60-i</code> currently stored.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numPairsDivisibleBy60</span><span class="params">(<span class="keyword">int</span>[] time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] mod = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">60</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : time)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x % <span class="number">60</span>;</span><br><span class="line">            mod[m] ++;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span>(m == <span class="number">0</span> || m == <span class="number">30</span>) &#123;</span><br><span class="line">                answer += mod[m] - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            answer += mod[<span class="number">60</span>-m];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time Complexity: O(n); Space Complexity: O(60)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60&quot;&gt;&lt;a href=&quot;#Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-daily-practice-20220101</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/01/Leetcode-daily-practice-20220101/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/01/Leetcode-daily-practice-20220101/</id>
    <published>2022-01-01T02:42:02.000Z</published>
    <updated>2022-01-01T03:31:39.161Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Hard-312-Burst-Balloons"><a href="#Hard-312-Burst-Balloons" class="headerlink" title="(Hard)312. Burst Balloons"></a>(Hard)<a href="https://leetcode.com/problems/burst-balloons/">312. Burst Balloons</a></h5><p>Happy New Year! 2022! Let’s begin with a hard problem. It’s a dynamic programming problem, with two dimensions.</p><p>Define <code>dp[i][j]</code> to indicate the maximum coins that can be obtained by bursting balloons in the <strong>open</strong> interval (i, j). Obviously, <code>dp[i][j] == 0 if i == j</code>. Considering state transition, <code>dp[i][j] = dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j]</code>. To fix errors when index going out of bounds of the array, insert an element “1” at both beginning and end of the array. Define dp length in both dimension as <code>nums.length + 2</code>. So the answer is conduct from dp[0][nums.length + 1].</p><ul><li>DP</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Insert an &quot;1&quot; in both beginning and end</span></span><br><span class="line">        <span class="keyword">int</span>[] balloons = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        balloons[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            balloons[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        balloons[n+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp[i][j] indicates the maximum coins that can be obtained by bursting balloons in the open interval (i, j)</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// Here i should loop from n to 0, because dp[i][j] should be obtained after dp[i+1][j]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n+<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;j; k++)&#123;</span><br><span class="line">                    <span class="comment">// State Transition</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + balloons[i]*balloons[k]*balloons[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time complexity: O(N^3^)</p><p>Space complexity: O(N^2^)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Hard-312-Burst-Balloons&quot;&gt;&lt;a href=&quot;#Hard-312-Burst-Balloons&quot; class=&quot;headerlink&quot; title=&quot;(Hard)312. Burst Balloons&quot;&gt;&lt;/a&gt;(Hard)&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://jarvan12th.github.io/HexoEn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Writing-at-the-Beginning</title>
    <link href="https://jarvan12th.github.io/HexoEn/2022/01/01/Writing-at-the-Beginning/"/>
    <id>https://jarvan12th.github.io/HexoEn/2022/01/01/Writing-at-the-Beginning/</id>
    <published>2022-01-01T02:39:03.000Z</published>
    <updated>2022-01-01T03:38:28.076Z</updated>
    
    <content type="html"><![CDATA[<p>I am a software developer with great interest in IT industry.</p><p>I’ve benefited a lot when interacting with brilliants in this field,  also when visiting their excellent blog sites.</p><p>So I aspire to join them.</p><p>I’ll write down topics I dive in.</p><p>Hope I could become an interested SDE, or an industry observer, or as least a storyteller.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I am a software developer with great interest in IT industry.&lt;/p&gt;
&lt;p&gt;I’ve benefited a lot when interacting with brilliants in this field,</summary>
      
    
    
    
    
    <category term="me" scheme="https://jarvan12th.github.io/HexoEn/tags/me/"/>
    
  </entry>
  
</feed>
