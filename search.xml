<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS SAP Certification</title>
    <url>/2021/06/28/AWS-SAP-Certification/</url>
    <content><![CDATA[<p>2021.06.24</p>
<img src="/2021/06/28/AWS-SAP-Certification/aws-sap-certification.png" class title="This is aws sap certification">]]></content>
      <categories>
        <category>certification</category>
      </categories>
      <tags>
        <tag>aws</tag>
        <tag>certification</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-weekly-contest-269</title>
    <url>/2021/11/29/Leetcode-weekly-contest-269/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th>Score</th>
<th>Finish Time</th>
<th>Q1(3)</th>
<th>Q2(4)</th>
<th>Q3(5)</th>
<th>Q4(6)</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>Null</td>
<td>5:00</td>
<td>Null</td>
<td>30:00</td>
<td>Null</td>
</tr>
</tbody>
</table>
</div>
<h5 id="5938-简单-找出数组排序后的目标下表"><a href="#5938-简单-找出数组排序后的目标下表" class="headerlink" title="5938(简单) 找出数组排序后的目标下表"></a>5938(简单) 找出数组排序后的目标下表</h5><p>​    <a href="https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/">https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/</a></p>
<h5 id="5939-中等-半径为-k-的子数组平均值"><a href="#5939-中等-半径为-k-的子数组平均值" class="headerlink" title="5939(中等) 半径为 k 的子数组平均值"></a>5939(中等) 半径为 k 的子数组平均值</h5><p>​    <a href="https://leetcode-cn.com/problems/k-radius-subarray-averages/">https://leetcode-cn.com/problems/k-radius-subarray-averages/</a></p>
<p>​    这题我的思路不错，下标自增的时候，k半径范围内的数一增一减。但实际上花了很多时间，主要是写了很多if分支，在确定每个分支的功能时花了很多时间。最后还吃了三次罚时，第一次是因为忘记删除debug信息，第二次未通过但没看错误信息，第三次想不到错误的点故意吃的罚时。未通过的用例k为40000，范围很大，就没有再调试了，最后评论区找到了更好的思路。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getAverages(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">        Arrays.fill(res,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= <span class="number">2</span>*k)&#123;</span><br><span class="line">                res[i - k] = (<span class="keyword">int</span>)(sum / (<span class="number">2</span> * k + <span class="number">1</span>));</span><br><span class="line">                sum -= nums[i - <span class="number">2</span>*k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2091-中等-从数组中移除最大值和最小值"><a href="#2091-中等-从数组中移除最大值和最小值" class="headerlink" title="2091(中等) 从数组中移除最大值和最小值"></a>2091(中等) 从数组中移除最大值和最小值</h5><p>​    <a href="https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/">https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/</a></p>
<h5 id="5941-困难-找出知晓秘密的所有专家"><a href="#5941-困难-找出知晓秘密的所有专家" class="headerlink" title="5941(困难) 找出知晓秘密的所有专家"></a>5941(困难) 找出知晓秘密的所有专家</h5><p>​    <a href="https://leetcode-cn.com/problems/find-all-people-with-secret/">https://leetcode-cn.com/problems/find-all-people-with-secret/</a></p>
<p>这题考察图的遍历</p>
<p>Dijkstra算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAllPeople</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] meetings, <span class="keyword">int</span> firstPerson)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt;[] graph = <span class="keyword">new</span> ArrayList[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] meeting : meetings) &#123;</span><br><span class="line">            graph[meeting[<span class="number">0</span>]].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;meeting[<span class="number">1</span>], meeting[<span class="number">2</span>]&#125;);</span><br><span class="line">            graph[meeting[<span class="number">1</span>]].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;meeting[<span class="number">0</span>], meeting[<span class="number">2</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 按时间排序</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (o1[<span class="number">1</span>] - o2[<span class="number">1</span>]));</span><br><span class="line">        q.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;); q.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstPerson, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] cur = q.poll();</span><br><span class="line">            <span class="keyword">int</span> v = cur[<span class="number">0</span>], t = cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[v] = <span class="keyword">true</span>;</span><br><span class="line">            res.add(v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] next : graph[cur[<span class="number">0</span>]]) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = next[<span class="number">0</span>], time = next[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (vis[p] || time &lt; t) <span class="keyword">continue</span>;</span><br><span class="line">                q.offer(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排序+查并集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并查集数组，记录每个元素的祖先节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] p;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找每个元素的祖先，（路径压缩，并查集模板）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAllPeople</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] meetings, <span class="keyword">int</span> firstPerson)</span> </span>&#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 祖先数组初始化，将每个元素的祖先标记为自己</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) p[i] = i;</span><br><span class="line">        <span class="comment">// 合并0号专家与firstPerson</span></span><br><span class="line">        p[firstPerson] = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, List&lt;<span class="keyword">int</span>[]&gt;&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 构造以时刻为key，会议列表为value的Map，TreeMap将自动按照key升序排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] m : meetings) &#123;</span><br><span class="line">            <span class="comment">// m[2]为会议时刻，每个时刻对应多场会议</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list = map.getOrDefault(m[<span class="number">2</span>], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            list.add(m);</span><br><span class="line">            map.put(m[<span class="number">2</span>], list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于每个时刻，遍历两次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 第一轮遍历，合并集合</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] l : map.get(x)) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = l[<span class="number">0</span>], b = l[<span class="number">1</span>];                </span><br><span class="line">                <span class="keyword">if</span> (p[find(a)] == <span class="number">0</span> || p[find(b)] == <span class="number">0</span>) &#123; p[find(a)] = <span class="number">0</span>; p[find(b)] = <span class="number">0</span>; &#125;</span><br><span class="line">                p[find(b)] = p[find(a)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第二轮遍历，分场景讨论</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] l : map.get(x)) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = l[<span class="number">0</span>], b = l[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 场景一：两位专家在前面的会议均不知道秘密，后面遍历中其中一位专家知道了秘密，瞬时共享，两人都将知道秘密</span></span><br><span class="line">                <span class="keyword">if</span> (p[find(a)] == <span class="number">0</span> || p[find(b)] == <span class="number">0</span>) &#123; p[find(a)] = <span class="number">0</span>; p[find(b)] = <span class="number">0</span>; &#125;</span><br><span class="line">                <span class="comment">// 场景二：两位专家在该时刻始终都不知道秘密，将合并的集合分离开，防止后面时刻有一个专家知道秘密，将秘密分享给另一个专家</span></span><br><span class="line">                <span class="keyword">else</span> &#123; p[a] = a; p[b] = b; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 祖先为0的元素即为知道秘密的专家</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[find(i)] == <span class="number">0</span>) ans.add(i);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>PTE-Score</title>
    <url>/2021/11/27/PTE-Score/</url>
    <content><![CDATA[<p>2021.09.18</p>
<img src="/2021/11/27/PTE-Score/pte-score.png" class title="This is the newest pte score">
]]></content>
      <categories>
        <category>certification</category>
      </categories>
      <tags>
        <tag>certification</tag>
        <tag>pte</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云部署SpringBoot应用</title>
    <url>/2021/11/29/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2SpringBoot%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>我买了阿里云的轻量服务器，双十一的折扣不要太划算，43块钱租赁一整年。服务器系统设置成CentOS8，用来验证Spring Boot应用的部署环节。</p>
<p>部署的流程很简单：本地成功运行SpringBoot应用 -&gt; 打成jar包 -&gt; 配置CentOS环境 -&gt; 部署jar包到服务器，可实际上，过程中走了很多弯路，却也有趣。从下午6点一直到1点半，我十分投入，甚至晚饭也忘了。本来打算立即写下这件事的，迫于太晚了，只好推到了早上。</p>
<p>  本地运行SpringBoot</p>
<p>这个应用克隆自<code>https://github.com/gabrieldim/Email-Sender-Spring-Boot.git</code>，实现了通过url发送邮件。需要配置发送人的邮箱信息，这里我用了QQ邮箱做测试。</p>
<p>注意要开启邮箱的第三方服务</p>
<img src="/2021/11/29/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2SpringBoot%E5%BA%94%E7%94%A8/qq_mail_third_party_service_enable.png" class title="开启QQ邮箱第三方服务">
<p>  打成jar包</p>
<p>这里我使用了IDEA的打包工具，但是IDEA给我留了陷阱。</p>
<img src="/2021/11/29/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2SpringBoot%E5%BA%94%E7%94%A8/idea-build_detail_info.png" class title="IDEA打jar包细节信息">
<p>这里的MANIFEST.MF文件应该放在根目录下，也即删除<code>\src\main\java</code>，然后顺着流程走下来，jar包放在<code>.out\artifacts\email_sender-jar</code></p>
<p>  配置CentOS</p>
<p>主要有两部分，安装jdk11和Tomcat。</p>
<p>安装jdk11走了很多弯路，最开始我用wget安装，但是在Oracle官网下载的tar.gz文件总是HTML类型的，导致解压出错。即使在wget命令中添加同意协议的cookie信息，依然如此。最后我换了思路，我先下载到windows本地，然后上传到LINUX服务器。</p>
<p>上传的操作利用了PPUTY工具。其实有很多方法的，但是之前连接AWS虚机的时候安装了PUTTY，所以直接拿来用最方便啦。PPUTY的命令是<code>pscp 本机压缩文件 Linux用户@Linux公用IP:Linux服务器目录</code>。</p>
<p>JDK安装包上传到服务器，首先用<code>tar -zxvf jdk-11.0.13-linux-x64.tar.gz</code>解压到<code>/usr/local/java</code>，这是我放置安装包的地方。然后在<code>vim /etc/profile</code>配置环境变量，在文件末尾添加``</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">## JAVA</span><br><span class="line">JAVA_HOME=/usr/local/jdk-<span class="number">11.0</span>.<span class="number">13</span></span><br><span class="line">JRE_HOME=/usr/local/jdk-<span class="number">11.0</span>.<span class="number">13</span></span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>
<p>最后要<code>source /etc/profile</code>刷新当前shell环境。<code>java -version</code>看到Java信息就算成功。</p>
<p>安装Tomcat最艰难，下载和安装过程和jdk大同小异，只是安装目录是<code>/usr/local/tomcat/apache-tomcat-10.0.13</code>，执行bin目录下启动命令<code>./startup.sh</code>，但是tomcat的启动日志<code>tail -f ../logs/catalina.out</code>一直报错，无法找到<code>./jdk-11.0.13/bin/jre/bin/java</code>无法找到路径，cd到相应目录发现没有jre目录，原来是Oracle搞得鬼，JDK11及以后，不单独提供JRE模块，但是用户可以自行创建JRE，命令则是在jdk的bin目录下执行<code>jlink.exe --module-path jmods --add-modules java.desktop --output jre</code>。之后重启Tomcat还是有错误，把JRE配置为和JDK同一目录便解决啦。</p>
<p>这时Tomcat已经安装好啦。我用windows的浏览器试着连接服务器的8080端口，但一直超时。这部分查了很久，直到看到有篇文章无心插柳提到了防火墙，我想起我忘了开放服务器的8080端口了Orz。</p>
<p>  部署应用</p>
<p>第一次没有成功，解决了上文IDEA留的陷阱就可以啦。</p>
<p>jar包目录下执行<code>java -jar email-sender.jar</code>可以看到Spring的信息。成功！</p>
]]></content>
      <tags>
        <tag>aliyun</tag>
        <tag>springboot</tag>
        <tag>linux</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
</search>
