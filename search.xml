<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode-daily-practice-20220101</title>
    <url>/2022/01/01/Leetcode-daily-practice-20220101/</url>
    <content><![CDATA[<h5 id="Hard-312-Burst-Balloons"><a href="#Hard-312-Burst-Balloons" class="headerlink" title="(Hard)312. Burst Balloons"></a>(Hard)<a href="https://leetcode.com/problems/burst-balloons/">312. Burst Balloons</a></h5><p>Happy New Year! 2022! Let’s begin with a hard problem. It’s a dynamic programming problem, with two dimensions.</p>
<p>Define <code>dp[i][j]</code> to indicate the maximum coins that can be obtained by bursting balloons in the <strong>open</strong> interval (i, j). Obviously, <code>dp[i][j] == 0 if i == j</code>. Considering state transition, <code>dp[i][j] = dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j]</code>. To fix errors when index going out of bounds of the array, insert an element “1” at both beginning and end of the array. Define dp length in both dimension as <code>nums.length + 2</code>. So the answer is conduct from dp[0][nums.length + 1].</p>
<ul>
<li>DP</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Insert an &quot;1&quot; in both beginning and end</span></span><br><span class="line">        <span class="keyword">int</span>[] balloons = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        balloons[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            balloons[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        balloons[n+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp[i][j] indicates the maximum coins that can be obtained by bursting balloons in the open interval (i, j)</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// Here i should loop from n to 0, because dp[i][j] should be obtained after dp[i+1][j]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n+<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;j; k++)&#123;</span><br><span class="line">                    <span class="comment">// State Transition</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + balloons[i]*balloons[k]*balloons[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(N^3^)</p>
<p>Space complexity: O(N^2^)</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing-at-the-Beginning</title>
    <url>/2022/01/01/Writing-at-the-Beginning/</url>
    <content><![CDATA[<p>I am a software developer with great interest in IT industry.</p>
<p>I’ve benefited a lot when interacting with brilliants in this field,  also when visiting their excellent blog sites.</p>
<p>So I aspire to join them.</p>
<p>I’ll write down topics I dive in.</p>
<p>Hope I could become an interested SDE, or an industry observer, or as least a storyteller.</p>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-daily-practice-20220103</title>
    <url>/2022/01/03/Leetcode-daily-practice-20220103/</url>
    <content><![CDATA[<h5 id="Hard-1851-Minimum-Interval-to-Include-Each-Query"><a href="#Hard-1851-Minimum-Interval-to-Include-Each-Query" class="headerlink" title="(Hard)1851. Minimum Interval to Include Each Query"></a>(Hard)<a href="https://leetcode.com/problems/minimum-interval-to-include-each-query/">1851. Minimum Interval to Include Each Query</a></h5><p>Sort  <code>int[][] intervals and int[] queries</code> in increasing order. Use a <code>PriorityQueue</code> to store <code>int[] pair</code> in <code>int[][] intervals</code> in order. For every query operation, add all the <code>int[] pair</code> that left is less or equals to <code>queries[j]</code>. Meanwhile, remove all the <code>int[] pair</code> that right is less than <code>queries[j]</code>. And the peek <code>pair</code> is the first <code>pair</code> that contains <code>queries[j]</code> and its interval is the smallest interval. If currently, <code>PriorityQueue</code> is Empty, then there isn’t such a smallest interval.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] minInterval(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = queries.length;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] queryPairs = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) queryPairs[i] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;queries[i], i&#125;;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] -b[<span class="number">0</span>]);</span><br><span class="line">        Arrays.sort(queryPairs, (a, b) -&gt; a[<span class="number">0</span>] -b[<span class="number">0</span>]);</span><br><span class="line">            </span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; (a[<span class="number">1</span>] - a[<span class="number">0</span>]) - (b[<span class="number">1</span>] - b[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> queryVaule = queryPairs[i][<span class="number">0</span>], queryKey = queryPairs[i][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j &lt; intervals.length &amp;&amp; intervals[j][<span class="number">0</span>] &lt;= queryVaule)&#123;</span><br><span class="line">                queue.offer(intervals[j]);</span><br><span class="line">                j ++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; queue.peek()[<span class="number">1</span>] &lt; queryVaule) queue.remove();</span><br><span class="line">            </span><br><span class="line">            result[queryKey] = queue.isEmpty() ? -<span class="number">1</span> : queue.peek()[<span class="number">1</span>] - queue.peek()[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complexity: O(m<em>logm + n</em>logn); Space Complexity: O(n)</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-daily-practice-20220102</title>
    <url>/2022/01/02/Leetcode-daily-practice-20220102/</url>
    <content><![CDATA[<h5 id="Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60"><a href="#Medium-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60" class="headerlink" title="(Medium)1010. Pairs of Songs With Total Durations Divisible by 60"></a>(Medium)<a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/">1010. Pairs of Songs With Total Durations Divisible by 60</a></h5><p>Obviously, <code>As a vaild pair (a, b), (a + b) % 60 == a % 60 + b % 60</code>. So construct a remainder array to store the frequency of remainders in <code>[0, 59]</code>.</p>
<p>The counting ways for <code>remainder 30, remainder 60</code> and <code>other remainders</code> are different.</p>
<ul>
<li>For <code>Rem 30</code>, it could make pairs with every <code>Rem 30</code> stored before it. <code>Rem 60</code> is as same as this.</li>
<li>For other <code>Rem i</code>, it should count every <code>Rem 60-i</code> currently stored.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numPairsDivisibleBy60</span><span class="params">(<span class="keyword">int</span>[] time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] mod = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">60</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : time)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = x % <span class="number">60</span>;</span><br><span class="line">            mod[m] ++;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span>(m == <span class="number">0</span> || m == <span class="number">30</span>) &#123;</span><br><span class="line">                answer += mod[m] - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            answer += mod[<span class="number">60</span>-m];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complexity: O(n); Space Complexity: O(60)</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>
